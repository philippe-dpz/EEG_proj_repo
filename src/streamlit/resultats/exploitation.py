import streamlit as st
import base64

image_Path = "./assets/sessions/images/"
gif_size = 200


def read_gif(path: str):
    file = open(path, "rb")
    contents = file.read()
    result = base64.b64encode(contents).decode("utf-8")
    file.close()
    return result


class Session:
    def __init__(
        self,
        subjectNumber: int,
        sessionNumber: int,
        imgLeft: str,
        imgRight: str,
    ):
        self.subjectNumber = subjectNumber
        self.sessionNumber = sessionNumber
        self.imgLeft = read_gif(imgLeft)
        self.imgRight = read_gif(imgRight)

    def getLabel(self):
        return (
            "Sujet N° "
            + str(self.subjectNumber)
            + " Session N° "
            + str(self.sessionNumber)
        )

    def getLeftImage(self):
        return self.imgLeft

    def getRightImage(self):
        return self.imgRight


@st.cache_resource
def loadSessions():
    session = []
    subjectNumber = 0
    sessionNumber = 1
    for idx in range(0, 18):
        if sessionNumber != 2:
            subjectNumber += 1
        img = image_Path + "img" + str(idx) + "_"
        session.append(
            Session(
                subjectNumber,
                sessionNumber,
                img + "1" + ".gif",
                img + "2" + ".gif",
            )
        )
        if subjectNumber == 8 and sessionNumber == 2:
            session.append(
                Session(
                    subjectNumber,
                    3,
                    image_Path + "img18_1.gif",
                    image_Path + "img18_2.gif",
                )
            )
        if subjectNumber == 9 and sessionNumber == 2:
            session.append(
                Session(
                    subjectNumber,
                    3,
                    image_Path + "img19_1.gif",
                    image_Path + "img19_2.gif",
                )
            )
        sessionNumber = 2 if sessionNumber < 2 else 1
    return session


st.markdown("# Exploitation")
st.markdown("Nous allons essayer d'utiliser les modèles construits avec la méthode 2.")
st.markdown(
    """<div style="text-align: justify;">
    Pour celà, nous tirons au hasard une suite de chiffres entre 1 et 3. Cette suite nous servira à tracer un parcours témoin, 1 signifie tourner à gauche, 2 tourner à droite, 3 continuer dans la même direction.\
    <br>Quand il s'agit d'un changement de direction, nous tirons au hasard une tentative de la classe correspondante dans la session sélectionnée et nous la soumettons aux modèles. <br>Le résultat prédit sert à tracer le parcours.<br><br>""",
    unsafe_allow_html=True,
)

if "show_topomap" not in st.session_state:
    st.session_state["show_topomap"] = 0

(
    col1,
    col2,
) = st.columns(2)
with col1:
    session = st.selectbox(
        "Choisissez une session:",
        loadSessions(),
        format_func=lambda session: session.getLabel(),
    )
    st.session_state.show_topomap = (
        1
        if st.checkbox(
            "Afficher les topomaps",
            False,
        )
        else 0
    )

    if st.session_state.show_topomap:
        st.markdown(
            f'<div style="display: flex;justify-content: space-evenly;"><img src="data:image/gif;base64,{session.getLeftImage()}" style="height:{gif_size}px;" ><img src="data:image/gif;base64,{session.getRightImage()}" style="height:{gif_size}px;"></div>',
            unsafe_allow_html=True,
        )
